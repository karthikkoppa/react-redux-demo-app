{"ast":null,"code":"import _objectSpread from\"/Users/kaknz/Desktop/project/project/git/react-redux-demo-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Users/kaknz/Desktop/project/project/git/react-redux-demo-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{request}from\"../services\";// import { parsePhoneNumber } from \"libphonenumber-js\";\nvar ADD_COLUMN=\"ADD_COLUMN\";var DELETE_COLUMN=\"DELETE_COLUMN\";var ADD_ROW=\"ADD_ROW\";var DELETE_ROW=\"DELETE_ROW\";var UPDATE_CELL=\"UPDATE_CELL\";var SET_HEADERS=\"SET_HEADERS\";var SET_BODY=\"SET_BODY\";var SET_TABLE=\"SET_TABLE\";var VALIDATE_CELLS=\"VALIDATE_CELLS\";var PARSE_CELLS=\"PARSE_CELLS\";var LIST_SURVEYS=\"LIST_SURVEYS\";var CREATE_PATIENTS_AND_SEND_SURVEYS=\"CREATE_PATIENTS_AND_SEND_SURVEYS\";export var addColumn=function addColumn(after){return{type:ADD_COLUMN,after:after};};export var deleteColumn=function deleteColumn(column){return{type:DELETE_COLUMN,column:column};};export var addRow=function addRow(after){return{type:ADD_ROW,after:after};};export var deleteRow=function deleteRow(row){return{type:DELETE_ROW,row:row};};export var updateCell=function updateCell(row,column,value){return{type:UPDATE_CELL,row:row,column:column,value:value};};export var setHeaders=function setHeaders(headers){return{type:SET_HEADERS,headers:headers};};export var setBody=function setBody(body){return{type:SET_BODY,body:body};};export var setTable=function setTable(rows){return function(dispatch){dispatch({type:SET_TABLE,rows:rows});};};export var validateCells=function validateCells(){return{type:VALIDATE_CELLS};};export var parseCells=function parseCells(){return{type:PARSE_CELLS};};export var listSurveys=function listSurveys(){return function(dispatch){return request(LIST_SURVEYS).then(function(_ref){var response=_ref.response;return dispatch({type:LIST_SURVEYS,surveys:response});});};};export var createPatientsAndSendSurveys=function createPatientsAndSendSurveys(){return function(dispatch){return dispatch(validateCells());};};export var initialiseTable=function initialiseTable(){return function(dispatch){return request(LIST_SURVEYS).then(function(_ref2){var response=_ref2.response;return dispatch({type:LIST_SURVEYS,surveys:response});}).then(function(){return dispatch(addRow());});};};var getNewCell=function getNewCell(){var _ref3=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},_ref3$index=_ref3.index,index=_ref3$index===void 0?-1:_ref3$index,_ref3$value=_ref3.value,value=_ref3$value===void 0?\"\":_ref3$value,_ref3$readOnly=_ref3.readOnly,readOnly=_ref3$readOnly===void 0?null:_ref3$readOnly,_ref3$type=_ref3.type,type=_ref3$type===void 0?\"text\":_ref3$type;var cell={id:Math.random(),type:type,value:value,readOnly:false};if(value===\"image\"||value===\"category\"||value===\"description\"||value===\"collection\"||value===\"avlble\"){cell.readOnly=true;cell.index=index;}else{cell.index=index;}return cell;};var initialState={headers:[{id:1,type:\"text\",value:\"image\",readOnly:true,image:true},{id:2,type:\"text\",value:\"category\",readOnly:true},{id:3,type:\"text\",value:\"description\",readOnly:true},{id:4,type:\"text\",value:\"collection\",readOnly:true},{id:5,type:\"text\",value:\"avlble\",readOnly:true},{id:6,type:\"button\",value:\"count\",count:true}],rows:[],surveys:[],selectedRows:[]};export default(function(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case ADD_COLUMN:var after=action.after;var newHeader=getNewCell();// add new header cell to existing header row\nvar headersLeft=_toConsumableArray(state.headers).slice(0,after+1);var headersRight=_toConsumableArray(state.headers).slice(after+1);var headers=[].concat(_toConsumableArray(headersLeft),[newHeader],_toConsumableArray(headersRight));// add new column to existing rows\nvar rows=state.rows.map(function(row){var newRowCell=getNewCell();var left=_toConsumableArray(row).slice(0,after+1);var right=_toConsumableArray(row).slice(after+1);var newRow=[].concat(_toConsumableArray(left),[newRowCell],_toConsumableArray(right));return newRow;});return _objectSpread({},state,{headers:headers,rows:rows});case DELETE_COLUMN:{var _action$column=action.column,column=_action$column===void 0?0:_action$column;var _headersLeft=_toConsumableArray(state.headers).slice(0,column);var _headersRight=_toConsumableArray(state.headers).slice(column+1);var _headers=[].concat(_toConsumableArray(_headersLeft),_toConsumableArray(_headersRight));var _rows=state.rows.map(function(row){var cellsLeft=_toConsumableArray(row).slice(0,column);var cellsRight=_toConsumableArray(row).slice(column+1);return[].concat(_toConsumableArray(cellsLeft),_toConsumableArray(cellsRight));});return _objectSpread({},state,{headers:_headers,rows:_rows});}case ADD_ROW:{var _action$after=action.after,_after=_action$after===void 0?0:_action$after;var newColumns=state.headers.map(function(h){var isSurvey=h.value===\"Survey\";var type=isSurvey?\"survey\":\"text\";var value=isSurvey&&state.surveys.length===1?state.surveys[0].name:\"\";return getNewCell({type:type,value:value});});var newRow=[newColumns];var rowsBefore=_toConsumableArray(state.rows).slice(0,_after);var rowsAfter=_toConsumableArray(state.rows).slice(_after);var _rows2=[].concat(_toConsumableArray(rowsBefore),newRow,_toConsumableArray(rowsAfter));return _objectSpread({},state,{rows:_rows2});}case DELETE_ROW:{var row=action.row;var _rowsBefore=_toConsumableArray(state.rows).slice(0,row);var _rowsAfter=_toConsumableArray(state.rows).slice(row+1);return _objectSpread({},state,{rows:[].concat(_toConsumableArray(_rowsBefore),_toConsumableArray(_rowsAfter))});}case UPDATE_CELL:{var _row=action.row,_column=action.column;var value=action.value;// update cell\nif(typeof _row!==\"undefined\"){var _rows3=JSON.parse(JSON.stringify(state.rows));var selectedRows=JSON.parse(JSON.stringify(state.selectedRows));if(_column===5){value=_rows3[_row][_column].value===\"\"?1:parseInt(_rows3[_row][_column].value)+1;selectedRows[_row]=_rows3[_row];}_rows3[_row][_column].value=value;// const rows = state.rows.map((r, i) => {\n//   return r.map((cell, j) => {\n//     if (i === row && j === column) {\n//       cell.value = value;\n//     }\n//     return cell;\n//   });\n// });\nreturn _objectSpread({},state,{rows:_rows3,selectedRows:selectedRows});}// update header\nvar _headers2=state.headers.map(function(h,i){if(i===_column){h.value=value;}return h;});return _objectSpread({},state,{headers:_headers2});}case SET_TABLE:{var _rows4=action.rows;var _headers3=_rows4[0];var body=_rows4.slice(1);// set headers\nvar newHeaders=_headers3.map(function(h,i){return getNewCell({value:h,index:i});});var setHeader=[];var hasImageColumn=newHeaders.find(function(e){return e.value===\"additional_image\";});if(hasImageColumn){setHeader.push(getNewCell({value:\"image\",readOnly:true,index:hasImageColumn.index}));}var hasCategoryColumn=newHeaders.find(function(e){return e.value===\"category\";});if(hasCategoryColumn){setHeader.push(getNewCell({value:\"category\",readOnly:true,index:hasCategoryColumn.index}));}var hasDescriptionColumn=newHeaders.find(function(e){return e.value===\"description\";});if(hasDescriptionColumn){setHeader.push(getNewCell({value:\"description\",readOnly:true,index:hasDescriptionColumn.index}));}var hasCollectionColumn=newHeaders.find(function(e){return e.value===\"collection\";});if(hasCollectionColumn){setHeader.push(getNewCell({value:\"collection\",readOnly:true,index:hasCollectionColumn.index}));}var hasAvlbleColumn=newHeaders.find(function(e){return e.value===\"avlble\";});if(hasAvlbleColumn){setHeader.push(getNewCell({value:\"avlble\",readOnly:true,index:hasAvlbleColumn.index}));}setHeader.push(getNewCell({value:\"count\",readOnly:true,index:-1}));// set body\nvar data=[];for(var k=0;k<body.length;k++){var isNotValid=null;if(k===1000){break;}else{var tmp=[];for(var i=0;i<setHeader.length;i++){var index=setHeader[i].index;var type=\"text\";var _value=index>=0?body[k][index]:'';if(setHeader[i].value===\"avlble\"&&_value===0){//bypass\nisNotValid=true;}else if(!isNotValid){isNotValid=false;tmp.push(getNewCell({type:type,value:_value}));}}if(!isNotValid){data.push(tmp);}}};return _objectSpread({},state,{headers:setHeader,rows:data});}case VALIDATE_CELLS:{var _headers4=state.headers,_rows5=state.rows;var newRows=_rows5.map(function(row){return row.map(function(cell,i){if(_headers4[i].validate){var isValid=_headers4[i].validate(cell.value);var updatedCell=_objectSpread({},cell);updatedCell.errors=isValid?[]:[\"Number not valid\"];return updatedCell;}return cell;});});return _objectSpread({},state,{rows:newRows});}case PARSE_CELLS:{var _headers5=state.headers,_rows6=state.rows;var _newRows=_rows6.map(function(row){return row.map(function(cell,i){if(_headers5[i].parse&&Array.isArray(cell.errors)&&cell.errors.length===0){var updatedCell=JSON.parse(JSON.stringify(cell));updatedCell.value=_headers5[i].parse(updatedCell.value);return updatedCell;}return cell;});});return _objectSpread({},state,{rows:_newRows});}// case CREATE_PATIENTS_AND_SEND_SURVEYS: {\n// }\ncase LIST_SURVEYS:{return _objectSpread({},state,{surveys:action.surveys});}default:return state;}});","map":{"version":3,"sources":["/Users/kaknz/Desktop/project/project/git/react-redux-demo-app/src/reducers/reducer.js"],"names":["request","ADD_COLUMN","DELETE_COLUMN","ADD_ROW","DELETE_ROW","UPDATE_CELL","SET_HEADERS","SET_BODY","SET_TABLE","VALIDATE_CELLS","PARSE_CELLS","LIST_SURVEYS","CREATE_PATIENTS_AND_SEND_SURVEYS","addColumn","after","type","deleteColumn","column","addRow","deleteRow","row","updateCell","value","setHeaders","headers","setBody","body","setTable","rows","dispatch","validateCells","parseCells","listSurveys","then","response","surveys","createPatientsAndSendSurveys","initialiseTable","getNewCell","index","readOnly","cell","id","Math","random","initialState","image","count","selectedRows","state","action","newHeader","headersLeft","slice","headersRight","map","newRowCell","left","right","newRow","cellsLeft","cellsRight","newColumns","h","isSurvey","length","name","rowsBefore","rowsAfter","JSON","parse","stringify","parseInt","i","newHeaders","setHeader","hasImageColumn","find","e","push","hasCategoryColumn","hasDescriptionColumn","hasCollectionColumn","hasAvlbleColumn","data","k","isNotValid","tmp","newRows","validate","isValid","updatedCell","errors","Array","isArray"],"mappings":"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","sourcesContent":["import { request } from \"../services\";\n// import { parsePhoneNumber } from \"libphonenumber-js\";\n\nconst ADD_COLUMN = \"ADD_COLUMN\";\nconst DELETE_COLUMN = \"DELETE_COLUMN\";\nconst ADD_ROW = \"ADD_ROW\";\nconst DELETE_ROW = \"DELETE_ROW\";\nconst UPDATE_CELL = \"UPDATE_CELL\";\nconst SET_HEADERS = \"SET_HEADERS\";\nconst SET_BODY = \"SET_BODY\";\nconst SET_TABLE = \"SET_TABLE\";\nconst VALIDATE_CELLS = \"VALIDATE_CELLS\";\nconst PARSE_CELLS = \"PARSE_CELLS\";\nconst LIST_SURVEYS = \"LIST_SURVEYS\";\nconst CREATE_PATIENTS_AND_SEND_SURVEYS = \"CREATE_PATIENTS_AND_SEND_SURVEYS\";\n\nexport const addColumn = after => ({ type: ADD_COLUMN, after });\nexport const deleteColumn = column => ({ type: DELETE_COLUMN, column });\nexport const addRow = after => ({ type: ADD_ROW, after });\nexport const deleteRow = row => ({ type: DELETE_ROW, row });\nexport const updateCell = (row, column, value) => ({\n  type: UPDATE_CELL,\n  row,\n  column,\n  value\n});\nexport const setHeaders = headers => ({ type: SET_HEADERS, headers });\nexport const setBody = body => ({ type: SET_BODY, body });\nexport const setTable = rows => dispatch => {\n  dispatch({ type: SET_TABLE, rows });\n};\nexport const validateCells = () => ({ type: VALIDATE_CELLS });\nexport const parseCells = () => ({ type: PARSE_CELLS });\n\nexport const listSurveys = () => dispatch => {\n  return request(LIST_SURVEYS).then(({ response }) =>\n    dispatch({ type: LIST_SURVEYS, surveys: response })\n  );\n};\n\nexport const createPatientsAndSendSurveys = () => dispatch => {\n  return dispatch(validateCells());\n};\n\nexport const initialiseTable = () => dispatch => {\n  return request(LIST_SURVEYS)\n    .then(({ response }) => dispatch({ type: LIST_SURVEYS, surveys: response }))\n    .then(() => dispatch(addRow()));\n};\n\nconst getNewCell = ({ index=-1,value = \"\", readOnly = null, type = \"text\" } = {}) => {\n  const cell = {\n    id: Math.random(),\n    type,\n    value,\n    readOnly: false\n  };\n\n if (\n    value === \"image\" ||\n    value === \"category\" ||\n    value === \"description\" ||\n    value === \"collection\" ||\n    value === \"avlble\"\n  ) {\n    cell.readOnly = true;\n    cell.index = index\n  } else {\n    cell.index = index\n  }\n\n  return cell;\n};\n\n\nconst initialState = {\n  headers: [\n    {\n      id: 1,\n      type: \"text\",\n      value: \"image\",\n      readOnly: true,\n      image: true\n    },\n    {\n      id: 2,\n      type: \"text\",\n      value: \"category\",\n      readOnly: true\n    },\n    {\n      id: 3,\n      type: \"text\",\n      value: \"description\",\n      readOnly: true,\n    },\n    {\n      id: 4,\n      type: \"text\",\n      value: \"collection\",\n      readOnly: true\n    },\n    {\n      id: 5,\n      type: \"text\",\n      value: \"avlble\",\n      readOnly: true\n    },\n    {\n      id: 6,\n      type: \"button\",\n      value: \"count\",\n      count: true\n    }\n  ],\n  rows: [],\n  surveys: [],\n  selectedRows: []\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_COLUMN:\n      const { after } = action;\n      const newHeader = getNewCell();\n      // add new header cell to existing header row\n      const headersLeft = [...state.headers].slice(0, after + 1);\n      const headersRight = [...state.headers].slice(after + 1);\n      const headers = [...headersLeft, newHeader, ...headersRight];\n      // add new column to existing rows\n      const rows = state.rows.map(row => {\n        const newRowCell = getNewCell();\n        const left = [...row].slice(0, after + 1);\n        const right = [...row].slice(after + 1);\n        const newRow = [...left, newRowCell, ...right];\n        return newRow;\n      });\n\n      return { ...state, headers, rows };\n    case DELETE_COLUMN: {\n      const { column = 0 } = action;\n      const headersLeft = [...state.headers].slice(0, column);\n      const headersRight = [...state.headers].slice(column + 1);\n      const headers = [...headersLeft, ...headersRight];\n\n      const rows = state.rows.map(row => {\n        const cellsLeft = [...row].slice(0, column);\n        const cellsRight = [...row].slice(column + 1);\n        return [...cellsLeft, ...cellsRight];\n      });\n\n      return {\n        ...state,\n        headers,\n        rows\n      };\n    }\n    case ADD_ROW: {\n      const { after = 0 } = action;\n      const newColumns = state.headers.map(h => {\n        const isSurvey = h.value === \"Survey\";\n        const type = isSurvey ? \"survey\" : \"text\";\n        const value =\n          isSurvey && state.surveys.length === 1 ? state.surveys[0].name : \"\";\n        return getNewCell({ type, value });\n      });\n      const newRow = [newColumns];\n      const rowsBefore = [...state.rows].slice(0, after);\n      const rowsAfter = [...state.rows].slice(after);\n      const rows = [...rowsBefore, ...newRow, ...rowsAfter];\n      return { ...state, rows };\n    }\n    case DELETE_ROW: {\n      const { row } = action;\n      const rowsBefore = [...state.rows].slice(0, row);\n      const rowsAfter = [...state.rows].slice(row + 1);\n      return { ...state, rows: [...rowsBefore, ...rowsAfter] };\n    }\n    case UPDATE_CELL: {\n      \n      const { row, column } = action;\n      let { value } = action;\n    \n      // update cell\n      if (typeof row !== \"undefined\") {\n        const rows = JSON.parse(JSON.stringify(state.rows));\n        const selectedRows = JSON.parse(JSON.stringify(state.selectedRows));\n        if(column === 5){\n          value = rows[row][column].value === \"\" ? 1 : parseInt(rows[row][column].value) + 1;\n          selectedRows[row] = rows[row];\n        }\n        rows[row][column].value = value;\n        // const rows = state.rows.map((r, i) => {\n        //   return r.map((cell, j) => {\n        //     if (i === row && j === column) {\n        //       cell.value = value;\n        //     }\n        //     return cell;\n        //   });\n        // });\n        return { ...state, rows, selectedRows };\n      }\n\n      // update header\n      const headers = state.headers.map((h, i) => {\n        if (i === column) {\n          h.value = value;\n        }\n        return h;\n      });\n      return { ...state, headers };\n    }\n    case SET_TABLE: {\n      const { rows } = action;\n      const headers = rows[0];\n      const body = rows.slice(1);\n      // set headers\n      const newHeaders = headers.map((h, i) => getNewCell({ value: h , index:i}));\n      let setHeader = [];\n      \n      const hasImageColumn = newHeaders.find(e => e.value === \"additional_image\");\n      if (hasImageColumn) {\n        setHeader.push(getNewCell({ value: \"image\", readOnly: true ,index : hasImageColumn.index}));\n      }\n\n      const hasCategoryColumn = newHeaders.find(e => e.value === \"category\");\n      if (hasCategoryColumn) {\n        setHeader.push(getNewCell({ value: \"category\", readOnly: true, index : hasCategoryColumn.index }));\n      }\n\n      const hasDescriptionColumn = newHeaders.find(e => e.value === \"description\");\n      if (hasDescriptionColumn) {\n        setHeader.push(getNewCell({ value: \"description\", readOnly: true , index : hasDescriptionColumn.index}));\n      }\n\n      const hasCollectionColumn = newHeaders.find(e => e.value === \"collection\");\n      if (hasCollectionColumn) {\n        setHeader.push(getNewCell({ value: \"collection\", readOnly: true, index : hasCollectionColumn.index }));\n      }\n\n      const hasAvlbleColumn = newHeaders.find(e => e.value === \"avlble\");\n      if (hasAvlbleColumn) {\n        setHeader.push(getNewCell({ value: \"avlble\", readOnly: true , index : hasAvlbleColumn.index}));\n      }\n\n     \n      setHeader.push(getNewCell({ value: \"count\", readOnly: true , index : -1}));\n      \n      // set body\n     \n      const data = [];\n      for (var k = 0; k < body.length; k++) {\n        let isNotValid = null\n        if (k === 1000) {\n          break;\n        } else {\n          const tmp = [];\n          for (let i = 0; i < setHeader.length; i++) {\n            const index = setHeader[i].index;\n            const type = \"text\";\n            const value = index >= 0 ? body[k][index] : '';\n            if(setHeader[i].value === \"avlble\" && value === 0){\n              //bypass\n              isNotValid = true;\n            } else if(!isNotValid){\n              isNotValid = false;\n              tmp.push(getNewCell({ type, value }));\n            }\n          }\n          if(!isNotValid){\n          data.push(tmp);\n          }\n        }\n      };\n      \n      return { ...state, headers: setHeader, rows: data };\n    }\n    case VALIDATE_CELLS: {\n      const { headers, rows } = state;\n      const newRows = rows.map(row => {\n        return row.map((cell, i) => {\n          if (headers[i].validate) {\n            const isValid = headers[i].validate(cell.value);\n            const updatedCell = { ...cell };\n            updatedCell.errors = isValid ? [] : [\"Number not valid\"];\n            return updatedCell;\n          }\n          return cell;\n        });\n      });\n      return { ...state, rows: newRows };\n    }\n    case PARSE_CELLS: {\n      const { headers, rows } = state;\n      const newRows = rows.map(row => {\n        return row.map((cell, i) => {\n          if (\n            headers[i].parse &&\n            Array.isArray(cell.errors) &&\n            cell.errors.length === 0\n          ) {\n            const updatedCell = JSON.parse(JSON.stringify(cell));\n            updatedCell.value = headers[i].parse(updatedCell.value);\n            return updatedCell;\n          }\n          return cell;\n        });\n      });\n      return { ...state, rows: newRows };\n    }\n    // case CREATE_PATIENTS_AND_SEND_SURVEYS: {\n\n    // }\n    case LIST_SURVEYS: {\n      return { ...state, surveys: action.surveys };\n    }\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}